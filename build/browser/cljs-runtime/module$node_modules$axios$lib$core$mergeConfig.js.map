{
"version":3,
"file":"module$node_modules$axios$lib$core$mergeConfig.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/axios/lib/core/mergeConfig.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$core$mergeConfig\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","module.exports","config1","config2","getMergedValue","target","source","isPlainObject","merge","isArray","slice","mergeDeepProperties","prop","isUndefined","config","undefined","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","directMergeKeys","forEach","valueFromConfig2","defaultToConfig2","axiosKeys","concat","otherKeys","Object","keys","filter","filterAxiosKeys","key","indexOf"]
}
