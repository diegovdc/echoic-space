{"version":3,"sources":["browser/views/music_single.cljs"],"mappings":"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","names":["browser.views.music-single/get-offset-top","id","js/document.getElementById","browser.views.music-single/go-to-hash","hash","browser.helpers/scroll-to","browser.helpers/set-scroll","browser.views.music-single/get-bg-img","base-url","post-attrs","browser.views.music-single/bg-img","url","browser.views.music-single/image","child-node","browser.views.music-single/title","app-state","post","base-url*","browser.views.helpers/base-url","cljs.core._EQ_","cljs.core.merge","browser.views.music-single/-play-button","action","playing-this-track?","cljs.core/deref","cljs.core.get_in","browser.state/player-state","should-change-track?","icon","and__5043__auto__","fexpr__33885","browser.views.music-single/play-button","browser.views.sonos/toggle-play-video","browser.views.sonos/toggle-play","browser.views.music-single/show-info-cb","local-state","cljs.core/reset!","cljs.core/not","fexpr__33887","reagent.core/after-render","js/console.error","browser.views.music-single/show-info","img-url","browser.views.music-single/video","youtube-id","start-seconds","browser.views.music-single/print-post","browser.views.helpers/page-container-bg-img","cljs.core/empty?","fexpr__33894","browser.views.music-single/find-post","tracks","slug","cljs.core/first","p1__33895#","cljs.core.filter","browser.views.music-single/main","single-slug","reagent.core.atom","entries","browser.views.helpers/get-entries","printed-post","reagent.core/create-class"],"sourcesContent":["(ns browser.views.music-single\n  (:require [browser.views.helpers :refer [page-container-bg-img base-url get-entries]]\n            [browser.helpers :refer [scroll-to set-scroll make-audio-url]]\n            [browser.views.sonos :as sonos]\n            [browser.state :as state]\n            [reagent.core :as r]))\n\n\n\n;; TODO merge blog json with music json on render\n\n(defn get-offset-top [id]\n  (-> id js/document.getElementById .-offsetTop))\n\n(defn go-to-hash [hash]\n  (if hash\n    (scroll-to (get-offset-top hash))\n    (set-scroll 0)))\n\n(defn get-bg-img [base-url post-attrs]\n  (str \"/\" base-url \"/\" (:slug post-attrs) \"/\" (:backgroundImage post-attrs)))\n\n(comment (-> state/app-state base-url))\n(defn bg-img [url]\n  {:background-image\n   (str \"url(\" url \")\")})\n\n(defn image [url child-node]\n  [:div {:class \"single__img--main\"\n         :style (bg-img url)}\n   child-node])\n\n(defn title [app-state post]\n  (let [base-url* (base-url app-state)]\n    (cond\n      (= nil (get-bg-img base-url* post)) [:h1 {:class \"single__ttl\"}\n                                           (:title post)]\n      :else\n      [:div {:class \"single__ttl-container\"}\n       [:h1 {:id \"single-ttl\"\n             :class \"single__ttl single__ttl--with-img\"\n             :style (merge {:fontSizes \"200px\"} (bg-img (get-bg-img base-url*  post)))}\n        (:title post)]])))\n\n\n(defn -play-button [app-state post-attrs action]\n  \"Renders a play button that supports a particular action (i.e. play video o play audio)\n  `post-attrs` {}\n  `action` :: post-attrs -> () -> PlayAction\"\n  (let [\n        playing-this-track? (= (get-in @state/player-state [:now-playing :track_name]) (:track_name post-attrs))\n        should-change-track? (not playing-this-track?)\n        icon (if (and playing-this-track? (@state/player-state :is-playing)) \"fa-pause\" \"fa-play\")]\n    [:span {:class (str \"single__play fa \" icon)    #_(.webkitRequestFullScreen (.-target e))\n            :style (bg-img (get-bg-img app-state post-attrs))\n            :on-click (action post-attrs should-change-track?)}]))\n\n\n(defn play-button [app-state post-attrs]\n  (cond\n    (= true (post-attrs :is_video)) (-play-button app-state post-attrs sonos/toggle-play-video)\n    :else (-play-button app-state post-attrs sonos/toggle-play)))\n\n\n(defn show-info-cb [local-state]\n  (fn []\n    (do\n      (reset! local-state\n              (merge\n               @local-state\n               {:show-info (not (@local-state :show-info))}))\n      (r/after-render\n       (fn []\n         ;; FIXME\n         (js/console.error \"Implement this\")\n         (set-scroll 0)\n         #_(->> (js/document.querySelector \".markdown-body\")\n                .-offsetTop\n                (#(- % 26))\n                (if (not (@local-state :show-info)) 0)\n                scroll-to))))))\n\n#_(-> (js/document.querySelector \".markdown-body\")\n      .-offsetTop)\n(defn show-info [img-url local-state]\n  ;; TODO implement me again\n  [:span]\n  #_[:span {:class \"single__show-info\"\n            :style (bg-img img-url)\n            :on-click (show-info-cb local-state)}\n     \"...\"])\n\n(defn video [post-attrs]\n  (let [youtube-id (:youtube_id post-attrs)\n        start-seconds (:startSeconds post-attrs)]\n    [:div\n     {:id \"player\"}\n     (when youtube-id\n       [:iframe\n        {:allowfullscreen \"allowfullscreen\",\n         :allow\n         \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n         :frameborder \"0\",\n         :title \"YouTube video player\",\n         :src (str \"https://www.youtube.com/embed/\"\n                   youtube-id\n                   (when start-seconds\n                     (str \"?\" start-seconds))),\n         :height \"315\",\n         :width \"560\"}])]))\n\n(defn print-post [app-state post local-state]\n  (cond\n    (= nil post) [:div \"not found\"]\n    :else\n    (let [post-attrs (:attributes post)\n          img-url (get-bg-img (base-url app-state) post-attrs)]\n      [:div\n       (page-container-bg-img\n        (str \"single--\" (:slug post-attrs))\n        [:div {:class \"\"}\n         (image\n          img-url\n          [:div\n           (title app-state post-attrs)\n           (play-button app-state post-attrs)\n           (show-info img-url local-state)])\n         (if (:is_video post-attrs)\n           [:div {:class \"single__video-player-container\"\n                  :id \"single__video-player-container\"}\n            (video post-attrs)])]\n\n        (if (and (not (empty? (post :body))) (@local-state :show-info))\n          [:div\n           [:div {:class \"markdown-body\"\n                  :dangerouslySetInnerHTML {:__html (:body post)}}]]))])))\n\n(defn find-post [tracks slug]\n  (first\n   (filter\n    #(= (:slug (:attributes %)) slug)\n    tracks)))\n\n(defn main [app-state single-slug hash]\n  (let [local-state (r/atom {:show-info true})\n        entries (get-entries app-state) ;; may be either music entries o blog entries\n        post (find-post entries single-slug)\n        printed-post (fn [] (print-post app-state post local-state))]\n    (r/create-class\n     {:reagent-render printed-post\n      :component-did-mount (fn [] (go-to-hash hash))})))\n"]}