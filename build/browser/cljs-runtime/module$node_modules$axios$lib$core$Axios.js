shadow$provide.module$node_modules$axios$lib$core$Axios=function(global,require,module,exports){function Axios(instanceConfig){this.defaults=instanceConfig;this.interceptors={request:new InterceptorManager,response:new InterceptorManager}}global=require("module$node_modules$axios$lib$utils");var buildURL=require("module$node_modules$axios$lib$helpers$buildURL"),InterceptorManager=require("module$node_modules$axios$lib$core$InterceptorManager"),dispatchRequest=require("module$node_modules$axios$lib$core$dispatchRequest"),
mergeConfig=require("module$node_modules$axios$lib$core$mergeConfig");Axios.prototype.request=function(config,JSCompiler_OptimizeArgumentsArray_p0){"string"===typeof config?(config=JSCompiler_OptimizeArgumentsArray_p0||{},config.url=config):config=config||{};config=mergeConfig(this.defaults,config);config.method=config.method?config.method.toLowerCase():this.defaults.method?this.defaults.method.toLowerCase():"get";var chain=[dispatchRequest,void 0];config=Promise.resolve(config);this.interceptors.request.forEach(function(interceptor){chain.unshift(interceptor.fulfilled,
interceptor.rejected)});for(this.interceptors.response.forEach(function(interceptor){chain.push(interceptor.fulfilled,interceptor.rejected)});chain.length;)config=config.then(chain.shift(),chain.shift());return config};Axios.prototype.getUri=function(config){config=mergeConfig(this.defaults,config);return buildURL(config.url,config.params,config.paramsSerializer).replace(/^\?/,"")};global.forEach(["delete","get","head","options"],function(method){Axios.prototype[method]=function(url,config){return this.request(mergeConfig(config||
{},{method,url,data:(config||{}).data}))}});global.forEach(["post","put","patch"],function(method){Axios.prototype[method]=function(url,data,config){return this.request(mergeConfig(config||{},{method,url,data}))}});module.exports=Axios}
//# sourceMappingURL=module$node_modules$axios$lib$core$Axios.js.map
