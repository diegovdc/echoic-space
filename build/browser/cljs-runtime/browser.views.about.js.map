{"version":3,"sources":["browser/views/about.cljs"],"mappings":"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","names":["browser.views.about/show-posters","reagent.core.atom","browser.views.about/n-images-to-load","browser.views.about/masonry","browser.views.about/reload-items","masonry","browser.views.about/layout","browser.views.about/init-masonry","js/setTimeout","container","js/document.querySelector","masonry*","js/Masonry","runner","js/imagesLoaded","cljs.core/reset!","browser.views.about/shuffle-posters","cljs.core/memoize","cljs.core/shuffle","browser.views.about/quote","browser.views.about/src->alt","src","clojure.string/replace","clojure.string.split","cljs.core.drop_last","clojure.string.join","browser.views.about/images-grid","total-posters","posters*","cljs.core/deref","cljs.core.doall","cljs.core.map","cljs.core.not_EQ_","_","browser.views.about/scripts-loader","posters","browser.views.js-loader/js-loader","goog.string.Const/from","cljs.core/count","cljs.core.take","browser.views.about/main-simple","app-state","scripts-loader-fn","body","cljs.core.get_in","cv","browser.views.helpers/page-container","browser.views.about/main","reagent.core/create-class","browser.state/app-state"],"sourcesContent":["(ns browser.views.about\n  (:require [browser.views.helpers :refer [page-container]]\n            [browser.state :as state]\n            [goog.string.Const :as Const]\n            [browser.views.js-loader :refer [js-loader]]\n            [reagent.core :as r]\n            [clojure.string :as str]))\n\n(set! *warn-on-infer* true)\n\n(def show-posters (r/atom false))\n\n(def n-images-to-load (r/atom 0))\n\n(def masonry (r/atom nil))\n\n(defn reload-items [^js/Masonry masonry]\n  (.reloadItems masonry))\n\n(defn layout [^js/Masonry masonry]\n  (.layout masonry))\n\n(defn init-masonry []\n  (js/setTimeout\n   #(let [container (js/document.querySelector\n                     \".about__m-grid\")\n          masonry* (js/Masonry.\n                    container\n                    {:itemSelector \".about__m-grid-item\"\n                     :columnWidth \".about__m-grid-item\"\n                     :isFitWidth true\n                     :percentPosition true})\n          runner (js/imagesLoaded. container)]\n      (-> runner\n          (.on\n           \"progress\"\n           (fn []\n             (layout masonry*))))\n      (reset! masonry masonry*)\n      (reset! show-posters true))\n   1000))\n\n(def shuffle-posters\n  \"Just once\"\n  (memoize shuffle))\n\n(def quote \"\u201cLograr una comprensio\u0301n ma\u0301s plena de la experiencia del pensamiento, que es tambie\u0301n la experiencia  cotidiana y la forma en que creamos el mundo o los objetos de este mundo y nos relacionamos con ellos... Se trata  de algo como una ecologi\u0301a del pensamiento (por oposicio\u0301n a una eco-nomi\u0301a), no de esforzarse por imponer sobre el mundo algo ma\u0301s alla\u0301 de sus posibilidades, desatentamente (e.g. el supuesto crecimiento ilimitado del  capitalismo), sino de crear con el mundo-pensamiento partiendo de sus posibilidades. No se trata tampoco de una  renuncia que pretenda decir que \u201clas cosas son asi\u0301, y no pueden ser diferentes\u201d, sino por el contrario del  descubrimiento-reconocimiento de todo lo que pueden ser); y esto es (no)parado\u0301jicamente algo ma\u0301s eficiente y  \u201cecono\u0301mico\u201d que la economi\u0301a misma, pues actu\u0301a en dia\u0301logo con el logos: con las formas de ha-ser del  pensamiento-mundo.\u201d\")\n\n(defn src->alt [src]\n  (-> src\n      (str/replace \"-\" \" \")\n      (str/split \".\")\n      drop-last\n      (->> (str/join \"\"))\n      (str \" (Diego Villase\u00f1or, m\u00fasico)\")))\n\n(defn images-grid [total-posters posters*]\n  [:div\n   [:div {:class \"about__m-grid\"\n          :style {:opacity (if @show-posters 1 0)}}\n    (doall (map (fn [src]\n                  [:img {:class \"about__m-grid-item\"\n                         :key src\n                         :alt (src->alt src)\n                         :src (str \"/images/presentaciones/\" src)}])\n                posters*))]\n   [:div {:class \"about__button-container\"}\n    (when (not= total-posters @n-images-to-load)\n      [:button {:class \"about__all-images-button\"\n                :on-click (fn [_]\n                            (reset! n-images-to-load\n                                    total-posters))}\n       (str \"Ver todas (\" total-posters \")\")])]])\n\n(defn scripts-loader [posters]\n  [js-loader {:scripts {#(exists? js/imagesLoaded)\n                        (Const/from \"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js\")\n                        #(exists? js/Masonry)\n                        (Const/from \"https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js\")}\n              :callback #(reset! n-images-to-load 7)\n              :loading [:div]\n              :loaded (images-grid\n                       (count posters)\n                       (take @n-images-to-load posters))}])\n\n(defn main-simple [app-state scripts-loader-fn]\n  (let [body (get-in @app-state [:about 0 :body])\n        cv (get-in @app-state [:cv 0 :body])\n        posters (->>  (get-in @app-state [:posters])\n                      shuffle-posters)]\n    (page-container\n     \"about pt-40\"\n     [:div\n      [:div {:class \"about__image-container\"}\n       [:img {:class \"about__image\" :src \"/images/about.png\"}]]\n      [:q {:class \"about__quote\"} quote]\n      [:div {:class \"markdown-body\"\n             :dangerouslySetInnerHTML {:__html body}}]\n      [:div {:class \"about__button-container\"}\n       [:a {:class \"about__button\" :target \"_blank\" :href \"/downloads/cv-2020-04.pdf\"}\n        \"Curriculum Vitae\"]]\n      [:div {:class \"about__activities-detail\"}]\n      (scripts-loader-fn posters)\n      [:div {:class \"markdown-body\"\n             :dangerouslySetInnerHTML {:__html cv}}]])))\n\n(defn main []\n  (r/create-class\n   {:component-did-update\n    (fn [_ _]\n      (cond\n        (nil? @masonry) (init-masonry)\n        @masonry (do (reload-items @masonry)\n                     (-> (js/imagesLoaded.\n                          (js/document.querySelector \".about__m-grid\"))\n                         (.on \"progress\" (fn [] (layout @masonry)))))))\n    :reagent-render\n    (fn []\n      (main-simple state/app-state scripts-loader))}))\n"]}