{"version":3,"sources":["browser/helpers.cljs"],"mappings":";AAIA,6BAAA,7BAAMA,kEAAYC,GAAGC;AAArB,AACE,OAACC,gBAAM,AAACC,+CAAOH,GAAGC;;AAEpB,6BAAA,7BAAMG,kEAAYC,KAAKC;AAAvB,AACE,QAAA,QAAO,CAAGD,OAAKC;;AAEjB,wBAAA,xBAAMC,wDAAOC;AAAb,AAAgB,kBAAA,XAACC,SAAYD;;AAE7B,0BAAA,1BAAME,4DAASF;AAAf,AACE,oBAAI,AAACG,MAASH;AAAd;;AAAmBA;;;AAErB,0BAAA,1BAAMI,4DAASC;AAAf,AACE,GAAI,2CAAA,1CAAG,AAACH,wBAAQG;AACd,QAAA,gDAAS,AAACH,wBAAQ,AAACH,sBAAMM;;AACzB,OAACH,wBAAQ,AAACH,sBAAMM;;;AAEpB,mCAAA,nCAAMC,8EAAkBC;AAAxB,AACE,2GAAA,vDAAK,AAACH,wBAAQ,uBAAA,vBAACI,eAAKD,gEAAiB,AAACH,wBAAQ,sBAAA,tBAACK,cAAIF;;AAErD,gCAAA,hCAAMG,wEAAeC,SAAIC;AAAzB,AACE,GAAI,AAACC,uBAAOD;AACVD;;AACA,OAACG,mBAASF;;;AAEd,4BAAA,5BAAMG,gEAAWC;AAAjB,AACE,OAACC,cAAiB,qBAAA,2CAAA,wDAAA,6DAAA,rLAACC,oHAAcF;;AAEnC,6BAAA,7BAAMG,kEAAYH;AAAlB,AACE,OAACC,cAAiB,qBAAA,2CAAA,hEAACC,oHAAcF;;AAEnC,uCAAA,vCAAMI,sFAAsBC,KAAKC,KAAKC;AAAtC,AACE,GAAI,yCAAA,zCAACC,+BAAcD;AACjBA;;AACA,QAAA,6EAAA,sDAAA,5DAAgCF,sDAASC,sDAASC;;;AAEtD,iCAAA,jCAAME,0EAAgBC;AAAtB,AACE,IAAMH,YAAU,AAAA,8GAAA,jBAAYG;IACtBJ,OAAK,AAAA,mFAAOI;AADlB,AAEE,4CAAA,rCAACN,6CAA6BE,KAAKC;;AAGvC,uBAAA,vBAAMI,sDAAMC;AAAZ,AACE,OAAClC,gBAAM,8IAAA,9IAACmC,mDAAqB,AAAA,oFAAOD;;AAEtC,qCAAA,rCAAME,kFAAoBC;AAA1B,AAIO,OAACI,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;aAAN,AAAAD,4CAAAD,WAAA,IAAA,pEAAWG;AAAX,AAAA,0FACGD,KAAK,gDAAA,hDAACN,sGAAcC,eAAEM;0HAJ9BT,xCACA,AAACC,mBAASL,lGACV,AAACM,gDAAQvC,gBAAMwC;;AAItB,gDAAA,hDAAMO,wGAA+BC,oBAAoBX;AAAzD,AACI,GAAI,AAAClB,uBAAO6B;AACRX;;AACA,sDAAA,WAAAY,1DAAChD;AAAD,AAAS,uDAAA,hDAACiD,kFACE,AAACC,uDACGH,oBACA,AAACI,cAAI,AAAA,2FAAAH;GACbZ;;;AAEhB,gCAAA,hCAAMgB,wEAAeC,IAAIC;AAAzB,AACE,GAAI,AAACC,0BAAUF,IAAIC;AACf,gEAAA,zDAACE,qDAAuBH,mDAAMC;;AAC9B,2DAAA,pDAACG,gDAAkBJ,mDAAMC;;;AAE/B,kCAAA,lCAAMI,4EAAiBC,yBAAyBC;AAAhD,AACE;AAAA,AACE,mFAAA,WAAAC,vFAACC,mDAAMH;AAAP,AAAiC,qCAAAE,9BAACT,+CAAgBQ","names":["browser.helpers/find-first","fn","coll","cljs.core/first","cljs.core.filter","browser.helpers/percentage","part","total","browser.helpers/toInt","n","js/parseInt","browser.helpers/fromNaN","js/isNaN","browser.helpers/padTime","time-component","browser.helpers/secondsToMinutes","seconds","cljs.core/quot","cljs.core/rem","browser.helpers/safe-rand-nth","or*","xs","cljs.core/empty?","cljs.core/rand-nth","browser.helpers/scroll-to","top","js/window.scroll","cljs.core/clj->js","browser.helpers/set-scroll","browser.helpers/maybe-make-audio-url","base","slug","file-name","clojure.string/includes?","browser.helpers/make-audio-url","music-post-attrs","browser.helpers/year","music","clojure.string.split","browser.helpers/sort-entry-by-year","entry","cljs.core/group-by","cljs.core.sort_by","cljs.core/>","cljs.core.map","p__31995","vec__31996","cljs.core.nth","year","musics","browser.helpers/filter-by-selected-categories","selected-categories","p1__31999#","cljs.core.not_EQ_","clojure.set.intersection","cljs.core/set","browser.helpers/toggle-in-set","set","val","cljs.core/contains?","clojure.set.difference","clojure.set.union","browser.helpers/toggle-category","selected-categories-atom","cat","p1__32000#","cljs.core.swap_BANG_"],"sourcesContent":["(ns browser.helpers\n  (:require [clojure.string :as str]\n            [clojure.set :as set]))\n\n(defn find-first [fn coll]\n  (first (filter fn coll)))\n\n(defn percentage [part total]\n  (* 100 (/ part total)))\n\n(defn toInt [n] (js/parseInt n 10))\n\n(defn fromNaN [n]\n  (if (js/isNaN n) 0 n))\n\n(defn padTime [time-component]\n  (if (< (fromNaN time-component) 10)\n    (str \"0\" (fromNaN (toInt time-component)))\n    (fromNaN (toInt time-component))))\n\n(defn secondsToMinutes [seconds]\n  (str (padTime (quot seconds 60)) \":\" (padTime (rem seconds 60))))\n\n(defn safe-rand-nth [or* xs]\n  (if (empty? xs)\n    or*\n    (rand-nth xs)))\n\n(defn scroll-to [top]\n  (js/window.scroll (clj->js {:top top :behavior \"smooth\"})))\n\n(defn set-scroll [top]\n  (js/window.scroll (clj->js {:top top})))\n\n(defn maybe-make-audio-url [base slug file-name]\n  (if (str/includes? file-name \"http\")\n    file-name\n    (str \"http://www.echoic.space/\" base \"/\" slug \"/\" file-name)))\n\n(defn make-audio-url [music-post-attrs]\n  (let [file-name (:file_name music-post-attrs \"\")\n        slug (:slug music-post-attrs)]\n    (maybe-make-audio-url \"music\" slug file-name)))\n\n\n(defn year [music]\n  (first (clojure.string/split (:date music) \"-\")))\n\n(defn sort-entry-by-year [entry]\n  (->> entry\n       (group-by year)\n       (sort-by first >)\n       (map (fn [[year musics]]\n              [year (sort-by :date > musics)]))))\n\n(defn filter-by-selected-categories [selected-categories entry]\n    (if (empty? selected-categories)\n        entry\n        (filter #(not= #{}\n                    (clojure.set/intersection\n                        selected-categories\n                        (set (:category %))))\n                entry)))\n\n(defn toggle-in-set [set val]\n  (if (contains? set val)\n      (clojure.set/difference set #{val})\n      (clojure.set/union set #{val})))\n\n(defn toggle-category [selected-categories-atom cat]\n  (fn []\n    (swap! selected-categories-atom #(toggle-in-set % cat))))\n"]}