{
"version":3,
"file":"module$node_modules$axios$lib$core$InterceptorManager.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAKlHC,QAASA,mBAAkB,EAAG,CAC5B,IAAKC,CAAAA,QAAL,CAAgB,EADY,CAF9B,IAAIC,MAAQL,OAAA,CAAQ,qCAAR,CAcZG,mBAAmBG,CAAAA,SAAUC,CAAAA,GAA7B,CAAmCC,QAAY,CAACC,SAAD,CAAYC,QAAZ,CAAsB,CACnE,IAAKN,CAAAA,QAASO,CAAAA,IAAd,CAAmB,CACNF,SADM,CAEPC,QAFO,CAAnB,CAIA,OAAO,KAAKN,CAAAA,QAASQ,CAAAA,MAArB,CAA8B,CALqC,CAarET,mBAAmBG,CAAAA,SAAUO,CAAAA,KAA7B,CAAqCC,QAAc,CAACC,EAAD,CAAK,CAClD,IAAKX,CAAAA,QAAL,CAAcW,EAAd,CAAJ,GACE,IAAKX,CAAAA,QAAL,CAAcW,EAAd,CADF,CACsB,IADtB,CADsD,CAcxDZ,mBAAmBG,CAAAA,SAAUU,CAAAA,OAA7B,CAAuCC,QAAgB,CAACC,EAAD,CAAK,CAC1Db,KAAMW,CAAAA,OAAN,CAAc,IAAKZ,CAAAA,QAAnB;AAA6Be,QAAuB,CAACC,CAAD,CAAI,CAC5C,IAAV,GAAIA,CAAJ,EACEF,EAAA,CAAGE,CAAH,CAFoD,CAAxD,CAD0D,CAQ5DnB,OAAOC,CAAAA,OAAP,CAAiBC,kBApDiG;",
"sources":["node_modules/axios/lib/core/InterceptorManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$core$InterceptorManager\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n};"],
"names":["shadow$provide","global","require","module","exports","InterceptorManager","handlers","utils","prototype","use","InterceptorManager.prototype.use","fulfilled","rejected","push","length","eject","InterceptorManager.prototype.eject","id","forEach","InterceptorManager.prototype.forEach","fn","forEachHandler","h"]
}
