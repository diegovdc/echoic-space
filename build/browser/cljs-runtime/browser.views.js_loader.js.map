{"version":3,"sources":["browser/views/js_loader.cljs"],"mappings":";AAKA,wCAAA,xCAAMA,wFAAeC;AAArB,AACE,OAACC,+CAAO,eAAAC,JAAKG;AAAL,AAAA,IAAAF,aAAAD;oBAAA,AAAAE,4CAAAD,WAAA,IAAA,3EAAUG;UAAV,AAAAF,4CAAAD,WAAA,IAAA,jEAAkBI;AAAlB,AACE,oBAAI,CAACD,8CAAAA,gDAAAA;AAASD;;AAAI,OAACG,6CAAKH,IAAIE;;GADtC,iCAGQP;;AAEV,qCAAA,rCAAMS,kFAAOC;AAAb,AACE,OAACC,+BACA,AAACC,qBACA,AAACC,6CACAC,oCACAJ;;AAEL;;;;;;;;;oCAAA,4CAAAK,hFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,eAAA,rEAQWhB;eARX,AAAAkB,4CAAAF,eAAA,tEAQmBI;cARnB,AAAAF,4CAAAF,eAAA,rEAQ4BK;aAR5B,AAAAH,4CAAAF,eAAA,pEAQoCM;AARpC,AASE,IAAMhB,gBAAQ,gDAAA,hDAACiB;AAAf,AACE,iCAAA,2CAAA,rEAACC,yJACsB,WAAKC;AAAL,AACE,IAAMC,aAAW,AAAC3B,sCAAcC;AAAhC,AACE,2DAAA,pDAAO,AAACS,mCAAMiB;AAAd,AACQ,AAAI,CAACN,yCAAAA,2CAAAA;;AACH,2CAAA,pCAACO,sBAAOrB;;GAL7C,yEAMkB,WAAAsB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAZ,4BAAAY;kBAAA,AAAAX,4CAAAW,eAAA,zEAAa7B;kBAAb,AAAAkB,4CAAAW,eAAA,zEAAqBR;iBAArB,AAAAH,4CAAAW,eAAA,xEAA6BP;AAA7B,AACE,oBAAA,AAAAQ,gBAAKxB;AAAQgB;;AAAOD","names":["browser.views.js-loader/filter-loaded","scripts","cljs.core.reduce","p__33313","vec__33314","cljs.core.nth","acc","loaded?","src","cljs.core.conj","browser.views.js-loader/load*","const-urls","goog.net.jsloader/safeLoadMany","cljs.core/clj->js","cljs.core.mapv","goog.html.TrustedResourceUrl/format","p__33321","map__33322","cljs.core/--destructure-map","cljs.core.get","browser.views.js-loader/js-loader","callback","loading","loaded","reagent.core.atom","reagent.core/create-class","_","not-loaded","cljs.core/reset!","p__33325","map__33326","cljs.core/deref"],"sourcesContent":["(ns browser.views.js-loader\n  (:require [reagent.core :as reagent]\n            [goog.net.jsloader :as jsloader]\n            [goog.html.TrustedResourceUrl :as TrustedResourceUrl]))\n\n(defn filter-loaded [scripts]\n  (reduce (fn [acc [loaded? src]]\n            (if (loaded?) acc (conj acc src)))\n          []\n          scripts))\n\n(defn load* [const-urls]\n  (jsloader/safeLoadMany\n   (clj->js\n    (mapv\n     TrustedResourceUrl/format\n     const-urls))))\n\n(defn js-loader\n  \"Load a supplied list of Javascript files and render a component\n   during loading and another component as soon as every script is\n   loaded.\n\n   Arg map: {:scripts {loaded-test-fn src}\n             :loading component\n             :loaded component}\"\n  [{:keys [scripts callback loading loaded]}]\n  (let [loaded? (reagent/atom false)]\n    (reagent/create-class\n     {:component-did-mount (fn [_]\n                             (let [not-loaded (filter-loaded scripts)]\n                               (.then (load* not-loaded)\n                                      #(do (callback)\n                                         (reset! loaded? true)))))\n      :reagent-render (fn [{:keys [scripts loading loaded]}]\n                        (if @loaded? loaded loading))})))\n"]}