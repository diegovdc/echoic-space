{"version":3,"sources":["browser/views/sonos.cljs"],"mappings":"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","names":["browser.views.sonos/$","selector","js/document.querySelector","browser.views.sonos/width","_","js/console.error","browser.views.sonos/css","browser.views.sonos/anim","browser.views.sonos/is-mobile-or-tablet","js/module$js$index.isMobileOrTablet","browser.views.sonos/b","cljs.core.partial","cljs.core/str","browser.views.sonos/sonos","browser.views.sonos/scroll-trackname","container","track-name","diff","should-scroll","browser.views.sonos/update-callback","howl","cljs.core/deref","cljs.core.get_in","browser.state/player-state","is-playing","and__5043__auto__","duration","seek","cljs.core.swap_BANG_","cljs.core/assoc","browser.helpers/secondsToMinutes","browser.helpers/percentage","js/browser","js/browser.views","js/browser.views.sonos","js/browser.views.sonos.update-interval","browser.views.sonos/update-interval","js/setInterval","browser.views.sonos/get-offset-top","id","js/document.getElementById","browser.views.sonos/toggle-play-video","post-attrs","onPlayerReady","e","player","start-seconds","js/console.log","browser.helpers/scroll-to","e33783","js/window.YT.Player","obj33785","obj33787","js/Error","browser.views.sonos/toggle-play*","track-to-play","should-change-track?","js/console.debug","previously-playing","cljs.core/clj->js","or__5045__auto__","cljs.core/not","fexpr__33788","cljs.core.assoc","js/module$node_modules$howler$dist$howler.Howl","browser.helpers/make-audio-url","browser.views.sonos/play-random","reagent.core/after-render","browser.views.sonos/toggle-play","should-play-track?","track","fexpr__33798","browser.state/app-state","p1__33792#","cljs.core.filter","cljs.core.not_EQ_","cljs.core/rand-nth","browser.views.sonos/track-name'","is-paused","track-slug","playable-track-if-in-single","attrs","on-click","cljs.core.merge","G__33805","G__33806","fexpr__33804","p1__33802#","cljs.core/some","cljs.core._EQ_","browser.views.sonos/frwd-btn","icon","browser.views.sonos/tracks-with-audio","tracks","p1__33809#","browser.views.sonos/find-track-to-play","cljs.core/memoize","is-single","single","p1__33832#","browser.helpers/find-first","browser.helpers/safe-rand-nth","browser.views.sonos/play-btn","currently-playing-track","cljs.core/select-keys","cljs.core/vals","cljs.core/flatten","browser.views.sonos/get-style","element","js/window","browser.views.sonos/get-duration-bar-padding-left","G__33855","js/document","js/parseInt","browser.views.sonos/click-x","event","browser.views.sonos/window-width","browser.views.sonos/set-new-track-position!","x","pad","new-position","browser.views.sonos/get-playable-track","app-state","slug","p1__33869#","browser.views.helpers/get-entries","browser.views.sonos/main","p1__33879#","fexpr__33880","fexpr__33881"],"sourcesContent":["(ns browser.views.sonos\n  (:require [\"/js/index\" :refer [isMobileOrTablet]]\n            [\"howler\" :refer [Howl]]\n            [browser.helpers\n             :refer\n             [find-first\n              make-audio-url\n              percentage\n              safe-rand-nth\n              scroll-to\n              secondsToMinutes\n              ]]\n            [browser.state :as state]\n            [browser.views.helpers :refer [get-entries]]\n            [reagent.core :as r]))\n\n;; FIXME\n(defn $ [selector] (js/document.querySelector selector))\n(defn width [_] (js/console.error \"please implement `width`\"))\n(defn css [_ _] (js/console.error \"please implement `css`\"))\n(defn anim [_ _ _ _] (js/console.error \"please implement `anim`\"))\n\n(def is-mobile-or-tablet isMobileOrTablet)\n\n(def b (partial str \"menu-main__\"))\n\n(def sonos (partial str \"sonos-player__\"))\n\n(defn scroll-trackname []\n  (let [container ($ \"#menu-main__playing-container\")\n        track-name ($ \"#menu-main__playing\")\n        diff (- (width container) (width track-name))\n        should-scroll (< diff 0)]\n    #_(.stop track-name)\n    #_(css track-name {:left 0})\n    (set! (.. track-name -style -left) 0)\n    #_(if should-scroll\n        (letfn [(to-the-left [] (anim track-name {:left diff} 7000 to-the-right))\n                (to-the-right [] (anim track-name {:left 0} 7000 to-the-left))]\n          (to-the-left)))))\n\n(comment (scroll-trackname))\n(defn update-callback\n  \"update player info by reading it from howl (see let)\"\n  []\n  (let [howl (get-in @state/player-state [:now-playing :howl])\n        is-playing (:is-playing @state/player-state)]\n    (if (and  howl is-playing)\n      (let [duration (.duration howl)\n            seek (.seek howl)]\n        (swap!\n         state/player-state\n         assoc :track-data {:duration (secondsToMinutes duration)\n                            :elapsed (secondsToMinutes seek)\n                            :percentage (percentage seek duration)})))))\n\n(defonce update-interval\n  (js/setInterval #(update-callback) 200))\n\n(declare play-random)\n\n(defn get-offset-top [id]\n  (-> id js/document.getElementById .-offsetTop))\n\n(set! *warn-on-infer* false)\n\n(defn toggle-play-video [post-attrs]\n  (let [onPlayerReady (fn [e]\n                        (let [player (.-target e)\n                              start-seconds (:startSeconds post-attrs)]\n                          (js/console.log \"event\" e)\n                          (js/console.log \"target\" (.-target e))\n                          (.playVideo player)\n                          (when start-seconds\n                            (.seekTo player start-seconds))\n                          (scroll-to (get-offset-top \"single__video-player-container\"))))]\n    (fn []\n      (try\n        (js/window.YT.Player. \"player\"\n                              (js-obj\n                               \"videoId\" (:youtube_id post-attrs)\n                               \"events\" (js-obj \"onReady\" onPlayerReady)))\n        (catch js/Error e nil )))))\n\n\n(defn toggle-play* [track-to-play should-change-track?]\n  (fn []\n    (js/console.debug \"toggle-play\" track-to-play)\n    (let [previously-playing (get-in @state/player-state [:now-playing :howl]\n                                     (clj->js {:pause (fn [] nil)}))]\n      (if (or should-change-track? (not (@state/player-state :is-playing)))\n        (do\n          (swap! state/player-state assoc :is-playing true)\n          (if (or should-change-track? (not (:is-paused @state/player-state)))\n            (swap! state/player-state assoc :now-playing\n                   (assoc track-to-play\n                          :howl (Howl. (clj->js {:src [(make-audio-url track-to-play)]\n                                                 :html5 true\n                                                 :autoplay true\n                                                 :onend play-random})))))\n          (swap! state/player-state assoc :is-paused false)\n          (r/after-render\n           #(do\n              (.pause previously-playing)\n              (.play (get-in @state/player-state [:now-playing :howl]))\n              (scroll-trackname))))\n        (do\n          (.pause (get-in @state/player-state [:now-playing :howl]))\n          (swap! state/player-state assoc :is-playing false)\n          (swap! state/player-state assoc :is-paused true))))))\n\n(defn toggle-play [track-to-play should-play-track?]\n  (if (-> track-to-play :is_video)\n    (toggle-play-video track-to-play)\n    (toggle-play* track-to-play should-play-track?)))\n\n(defn play-random []\n  (let [track (->>  (@state/app-state :music)\n                    (filter #(and\n                              (not= (get-in % [:attributes :title])\n                                    (get-in @state/player-state [:now-playing :title]))\n                              (get-in % [:attributes :file_name])))\n                    (rand-nth)\n                    (:attributes))]\n    (swap! state/player-state assoc :is-playing false)\n    ((toggle-play track true))))\n\n(defn track-name' [is-playing is-paused track-name track-slug playable-track-if-in-single]\n  (let [attrs (:attributes playable-track-if-in-single)\n        on-click (if playable-track-if-in-single\n                   (toggle-play attrs true)\n                   play-random)]\n    [:a (merge {:class (b \"playing\") :id (b \"playing\")\n                :style {:position \"relative\"}}\n               (if is-playing\n                 {:href ((:routing-fn @state/app-state)\n                         (if (some #(=  \"Bit\u00e1cora\" %) (:category attrs))\n                           :browser.routes/blog-single\n                           :browser.routes/music-single)\n                         {:slug track-slug})}\n                 {:on-click on-click}))\n     (if (or is-playing is-paused)\n       track-name\n       \"escucha\")]))\n\n(defn frwd-btn [icon is-playing]\n  [:i {:class (str (b \"playing-next-track\")\n                   \" fa \"\n                   (if is-playing (icon \"fa-forward\")))\n       :on-click play-random}])\n\n(defn tracks-with-audio [tracks]\n  (filter #(not= nil (get-in % [:attributes :file_name]))) tracks)\n\n(def find-track-to-play\n  (memoize\n   (fn [is-single single tracks]\n     (js/console.debug \"is single\" is-single single \"-\")\n     (if is-single\n       (find-first #(= single (get-in % [:attributes :slug])) tracks)\n       (safe-rand-nth {} tracks)))))\n\n(defn play-btn\n  \"Play button for the lower bar of sonos\"\n  [icon is-playing currently-playing-track]\n  (let [tracks (tracks-with-audio (-> @state/app-state\n                                      (select-keys [:music :blog])\n                                      vals\n                                      flatten))\n        single (-> @state/app-state :route :path-params :slug)\n        is-single (or\n                   (= (:page @state/app-state) :music-single)\n                   (= (:page @state/app-state) :blog-single))]\n    [:i {:class  (sonos (str \"icon-play fa \" (icon \"fa-pause\")))\n         :on-click (toggle-play\n                    (:attributes (find-track-to-play is-single single tracks))\n                    (if (and is-single ;; should change track\n                             (not is-playing)\n                             (not= currently-playing-track single))\n                      true\n                      false))}]))\n\n(defn get-style [element]\n  (.getComputedStyle js/window element))\n\n(defn get-duration-bar-padding-left []\n  (or (some-> (.querySelector js/document \".sonos-player__duration\")\n              get-style\n              .-paddingLeft\n              js/parseInt)\n      0))\n\n(defn click-x [event]\n  (-> event .-clientX))\n\n(defn window-width []\n  (-> js/document .-body .-clientWidth))\n\n(defn set-new-track-position! [event track]\n  (let [x (.-clientX event)\n        pad (get-duration-bar-padding-left)\n        howl (get-in @state/player-state [:now-playing :howl])\n        new-position (when howl (* (.duration howl)\n                                   (/ (- x pad)\n                                      (- (window-width) pad))))]\n    (if (or (not howl) (<= x pad))\n      nil\n      (.seek howl new-position))))\n\n#_(-> @state/app-state :route :data :name #{:browser.routes/music-single\n                                          :browser.routes/blog-single})\n\n\n(defn get-playable-track [app-state]\n  (let [slug (-> @app-state :route :path-params :slug)]\n    (some #(and (= slug (-> % :attributes :slug))\n                (or (-> % :attributes :file_name)\n                    (-> % :attributes :is_video))\n                %)\n          (get-entries app-state))))\n\n(defn main []\n  (let [is-playing (@state/player-state :is-playing)\n        is-paused (@state/player-state :is-paused)\n        track-name (get-in @state/player-state [:now-playing :track_name])\n        track-slug (get-in @state/player-state [:now-playing :slug])\n        icon #(if is-playing % \"fa-play\")\n        playable-track-if-in-single (get-playable-track state/app-state)]\n    [:div {:class (b \"playing-container\") :id (b \"playing-container\")}\n                                        ; (if is-mobile-or-tablet \" is-mobile\"\n     [:div {:class (str (b \"playing-overflower\"))}\n      (track-name' is-playing is-paused track-name track-slug playable-track-if-in-single)]\n     (frwd-btn icon is-playing)\n     [:div {:class (sonos \"duration\")\n            :on-click set-new-track-position!}\n      [:div {:class (sonos \"elapsed\")\n             :style {:width (str\n                             (*\n                              (- (window-width)\n                                 (get-duration-bar-padding-left))\n                              (/ (get-in\n                                  @state/player-state\n                                  [:track-data :percentage]\n                                  0)\n                                 100))\n                             \"px\")}}]\n      (play-btn icon is-playing track-slug)\n      [:div {:class (sonos \"time-container\")}\n       [:p {:class (str (sonos \"time \") (sonos \"time-elapsed\"))}\n        (get-in @state/player-state [:track-data :elapsed] \"00:00\")]\n       [:p {:class (str (sonos \"time \") (sonos \"time-total\"))}\n        (get-in @state/player-state [:track-data :duration] \"00:00\")]]]]))\n\n(comment (play-random))\n"]}