{"version":3,"sources":["browser/main.cljs"],"mappings":";;AASA,wBAAA,xBAAMA,wDAAUC,KAAKC,UAAUC;AAA/B,OACM,AAACC,qDAAUD,rDACX,+DAAA,WAAAE,1EACA,PACA;AAFA,AAAQ,iEAAAA,mEAAA,2EAAA,xMAACC;SACT,WAAAC;AAAA,AAAQ,OAAA,mFAAAA;SACR,WAAAC;AAAA,AAAQ,OAACC,mDAAMC,wBAAUC,gBAAMT,UAAU,yEAAAM,mCAAAA,3GAACP,qCAAAA,uDAAAA;;;AAEhD,gCAAA,hCAAMW,wEAAkBC;AAAxB,AACE,mDAAA,WAAAC,vDAACC;AAAD,AAAM,yDAAAD,iBAAA,mFAAA,gEAAA,tNAACE,2RAEU,WAAKC;AAAL,AACE,QAAMA,JAAEC;IAAAA,QACN,qDAAA,rDAACC,mDAAqBD;AADxB,AAEE,OAACH,4CAAIK,oBAAoBF;;GACzCL;;AAEP,4BAAA,5BAAMQ;AAAN,AAAA,0FAAA,mDAEG,kBAAA,AAAAC,gBAAKC,uBACH,iBAAMC,OAAK,AAAA,mFAAO,AAAA,mFAAA,AAAAF,gBAAQC;AAA1B,AAAA,0FAAA,+EAAA,wFAAA,AAAAD,pHACQ,AAACG,+GACLD,qBAAMD;KAHZ;;AAKH,qBAAA,rBAAMG;AAAN,OAEM,YAAA,ZAACC,+FAAgB,yCAAA,uDAAA,hGAAC3B,sBAAS4B,8FACV,yCAAA,qDAAA,9FAAC5B,sBAAS4B,2FACV,yCAAA,wDAAA,jGAAC5B,sBAAS4B,+FACV,yCAAA,2DAAA,pGAAC5B,sBAAS4B,oGACV,yCAAA,kDAAA,3FAAC5B,sBAAS4B,hlBAC3B,orBAAQ,WAAKC;AAAL,AAEE,AAACC;;AACD,wDAAA,jDAACC,oIAAaV,kCACD,wBAAA,xBAAiBW;;;AAE9C,oBAAA,pBAAeC;AAAf,AACE,OAACP;;;AAEH,oBAAA,pBAAMQ;AAAN,AAGE,mBAAA,ZAACC","names":["browser.main/get-data","func","state-key","url","js/module$node_modules$axios$dist$browser$axios_cjs.get","p1__37251#","cljs.core.js__GT_clj","p1__37252#","p1__37253#","cljs.core.swap_BANG_","browser.state/app-state","cljs.core/assoc","browser.main/parse-categories","music","p1__37254#","cljs.core.map","cljs.core.update_in","c","v","clojure.string.split","clojure.string/trim","browser.main/current-page","cljs.core/deref","browser.routes/match","view","browser.views.header/main","browser.main/start","js/Promise.all","cljs.core/identity","_","browser.routes/init","reagent.dom.render","js/document","browser.main/init","browser.main/stop","js/console.log"],"sourcesContent":["(ns browser.main\n  (:require\n   [\"axios\" :as axios]\n   [browser.routes :as routes :refer [routes]]\n   [browser.state :as state :refer [app-state]]\n   [browser.views.header :as header]\n   [clojure.string :as str]\n   [reagent.dom :as rdom]))\n\n(defn get-data [func state-key url]\n  (-> (axios/get url)\n      (.then #(js->clj % :keywordize-keys true))\n      (.then #(:data %))\n      (.then #(swap! app-state assoc state-key (func %)))))\n\n(defn parse-categories [music]\n  (map #(update-in %\n                   [:attributes :category]\n                   (fn [c]\n                     (as-> c v\n                       (clojure.string/split v \"$\")\n                       (map clojure.string/trim v))))\n       music))\n\n(defn current-page []\n  [:div\n   (if @routes/match\n     (let [view (:view (:data @routes/match))]\n       [:div (header/main)\n        [view @routes/match]]))])\n\n(defn start []\n  ;; NOTE Promise.all seems necessary because r/atoms don't seem to work outside of the `current-page` function\n  (-> (js/Promise.all [(get-data identity :about \"/data/about.json\")\n                       (get-data identity :blog \"/data/blog.json\")\n                       (get-data identity :music \"/data/music.json\")\n                       (get-data identity :posters \"/data/posters.json\")\n                       (get-data identity :cv \"/data/cv.json\")])\n      (.then  (fn [_]\n                ;; FIXME\n                (routes/init)\n                (rdom/render [current-page]\n                             (.getElementById js/document \"app\"))))))\n\n(defn ^:export init []\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}